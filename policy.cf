bundle agent scc
{
  methods:
    "scc_mock_report_data";
    "scc_inventory_report_v0";
}
bundle agent scc_mock_report_data
# @brief Ensure that there is some scan report data available for use as inventory
# @description This mock data was generated using parseXML.py from Chris Stephens and XCCDF xml produced by scc-5.8 on RHEL 8 in a test environment.
{
  files:
    scc_inventory_enabled::
      "/tmp/scc-inventory-v0.dat"
        template_method => "mustache",
        edit_template => "$(this.promise_dirname)/scc-inventory-v0.dat.mustache";
}

bundle agent scc_inventory_report_v0
{
  vars:
    scc_inventory_enabled::

      #"report_xccdf" string => "/home/vagrant/SCC/Sessions/2024-03-12_152554/Results/SCAP/XML/HUB_SCC-5.8_2024-03-12_152554_XCCDF-Results_RHEL_8_STIG-1.10.5.xml"

      # Probably, it would be better if the script took arguments for the namespace and bundle in which to define variables
      # and then it could output module protocol defining vars, easily slurped up by readmoduleprotocol()
      "report_dat" string => "/tmp/scc-inventory-v0.dat";

      # The Short Names are unique in a report, so we can parse with data_readstringarray having the result indexed by short name.
      "d_report_dat"
        data => data_readstringarray( "$(report_dat)",
                                      "",
                                      "\s+",
                                      "inf",
                                      "inf"),
        if => fileexists( "$(report_dat)" );

      "i" slist => getindices( d_report_dat );

      "results" slist => { "fail", "notapplicable", "notchecked", "pass" };

      "$(results)[$(i)]"
        string => "$(i)",
        meta => { "inventory", "attribute_name=SCC 5.8 $(results)" },
        if => strcmp( "$(results)", "$(d_report_dat[$(i)])" );

}
bundle agent __main__
{
      methods: "scc";
}

body file control
{
  namespace => "scc";
}

bundle agent packages
{
  packages:
      "spawarscc"
        policy => "present",
        action => default:policy( "warn" ),
        classes => default:results( "bundle", "package_spawarscc" );

  reports:
    package_spawarscc_notkept::
      "$(with)"
        with => concat( "spawarscc is not installed, please retreive and",
                        " install the version appropriate for your platform from",
                        " https://public.cyber.mil/stigs/scap/" );
}
