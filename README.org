This repository contains policy for mocking Compliance Reporting in CFEngine Enterprise for SCC, the DoD SCAP tool.

* Variables
** Scheduling scans

Variables are exposed for configuring scan execution initiated via cron. By default scans will be scheduled for once a week.

*Note:* Each of these variables is used in the cron configuration so be mindful of how cron scheduling works.

*** scc:schedule.hour_start

Defines the minimum hour during which automatic scheduling can occur. This is not defined by default.

#+begin_src json
  {
      "variables": {
          "scc:schedule.hour_start": {
              "value": "17",
              "comment": "Don't auto schedule scans until 17:00"
          }
      }
  }
#+end_src

Note: This value is uses as the minimum start time

*** scc:schedule.window_length

Defines the number of hours from hour_start during which automatic scheduling can occur. This is not defined by default.

#+begin_src json
  {
      "variables": {
          "scc:schedule.window_length": {
              "value": "12",
              "comment": "From the start hour allow scan to be scheduled during the next N (12) hours. E.g. If hour start is 17 (5pm), pick an hour between 17:00 and 05:00."
          }
      }
  }
#+end_src

*** scc:schedule.hour_selected

Defines the hour during which the scan should be run. This sets the hour in the cron job used to schedule scan execution and report generation.

If this is not explicitly defined and no start hour and window_length are defined the host will make a stable selection (from 1 to 23) automatically in a way that tries to provide a relatively even distribution across hosts. If window length_and hour_start are defined, it will select a stable hour in that period.

#+begin_src json
  {
      "variables": {
          "scc:schedule.hour_selected": {
              "value": "17",
              "comment": "Target scc scan for 5:00pm hour instead of automatic selection."
          }
      }
  }
#+end_src

*** scc:schedule.minute_selected

Defines the minute during which the scan should be run. This sets the minute in the cron job used to schedule scan execution and report generation. If this is not explicitly defined, the host will make a stable selection (from 1 to 59) automatically in a way that tries to provide a relatively even distribution across hosts.

#+begin_src json
  {
      "variables": {
          "scc:schedule.minute_selected": {
              "value": "50",
              "comment": "Target scc scan for 50th minute of the hour instead of automatic selection."
          }
      }
  }
#+end_src

*** scc:schedule.weekday_selected

Defines the day of the week in which the scan should be run. This sets the day of the week in the cron job used to schedule scan execution and report generation. If this is not explicitly defined the host will make a stable selection (from 0 to 6) automatically in a way that tries to provide a relatively even distribution across hosts.

#+begin_src json
  {
      "variables": {
          "scc:schedule.weekday_selected": {
              "value": "6",
              "comment": "Target scc scan for Saturday."
          }
      }
  }
#+end_src

*** scc:schedule.monthday_selected

Defines the day of the month in which the scan should be run. This sets the day of the month in the cron job used to schedule scan execution and report generation. If this is not explicitly defined the default value (=*=) is used.

#+begin_src json
  {
      "variables": {
          "scc:schedule.monthday_selected": {
              "value": "1",
              "comment": "Target scc scan for the first of the month."
          }
      }
  }
#+end_src
* Classes

** default:scc_inventory_enabled

Enables reporting of inventory data generated from scc scan reports.

*Note:* *This class needs to be reported.* It's used by the scc compliance report for targeting which hosts checks should be considered against. If this class is not reported the compliance report will not consider the host in it's checks.

#+begin_src json
  {
      "variables": {
          "default:scc_inventory_enabled": {
              "tags": [ "report" ]
              "comment": "Enable scc inventory"
          }
      }
  }
#+end_src

* Inventory

[[https://raw.github.com/nickanderson/cfengine-scc/main/media/inventory-version-pctpass-report-date-ruleset.png]]

** SCC Scheduled Scan Time

The local time in 24 hour format that the scc scan is schedule for.

Note: This is derived automatically if not defined by =scc:schedule.minute_selected=, or =scc:schedule.hour_selected=.

** SCC % pass of checked

The percentage of checks performed that passed. Note, this excludes results that were =notapplicable= or =notchecked=.

** SCC pass

Rules that where checked and passed.

** SCC notapplicable

Rules that were not applicable.

** SCC notchecked

Rules that were not checked.

** SCC fail

Rules that were checked and failed.

** SCC Ruleset

Ruleset used during scc scan, extracted from result filename.

** SCC Report Date

The date of the most recent scc scan result, extract from result filename.

** SCC Report Version

The version of the scc tool used during the most recent scan, extracted from result filename.

* Compliance Report
The compliance report is provided as a separate module (=compliance-report-scc=).

[[https://raw.github.com/nickanderson/cfengine-scc/main/media/compliance-example.png]]

* TODOs :noexport:

** DONE Expose time ranges for automatic distribution of execution as tunables
CLOSED: [2024-05-01 Wed 17:00]
So that we can target non-working hours for example.

Exposed hour_start and window_length which can be used to define a range of time in which the scan can be scheduled.

** Add documentation for inventorying results of "manual checks"

E.g. for Red Hat 8, there are MANY checks that are manual and not automated by the SCC tool, even though the tooling provides copy and paste checks (and fixes) for many of these.

** Add inventory for pass% total (of pass fail + manual check pass)
This way we know our overall pass% per host including manual checks but also what we know will pass from the SCC tool itself.

** Consider how to provide more rich information about the checks
- The compliance report details field for each condition could contain the check and fix text as well
  - It's not pretty, it's just a simple string, so it would be hard to read without changes to Mission Portal
- With a Mission Portal change we could turn the ijnventoried finding ids into links
  - Would not work well if the link target were on the internet (many of these environments are air gapped)
  - Could plausibly make the link target the related condition in Mission Portal (still have a small issue with lack of beauty in details field)
